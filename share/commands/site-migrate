#!/bin/bash

long_usage_message="usage: $(basename $0) site-migrate <site> <new-platform>
Migrate the site from it's current platform to a new platform. Note, if you 
want to make a clone or rename a site, use site-restore instead.

Arguments
  <site> - The site to migrate.
  <platform> - The name or path to the new platform."

long_check_args "$2" "$#" 2

site="$2"
new_platform=$(basename "$3")

# Run some sanity checks.
if ! long_check_site_exists "$site"; then
  long_die "Site doesn't exist (%s)." 1 "$site"
fi

if ! long_container_running "$site"; then
  long_die "Please start the site before migrating"
fi

if [ ! -d "${LONG_SRV}/platforms/${new_platform}" ]; then
  long_die "Can't find the new platform (%s)." 1 "$new_platform"
fi

# Record existing platform
long_set_site_platform "$site"
old_platform="$LONG_SITE_PLATFORM"

# Record existing database
long_set_site_db_host "$site"
db_host="$LONG_SITE_DB_HOST"

if [ -z "$db_host" ]; then
  long_die "Can't determine current database host."
fi

if [ -z "$old_platform" ]; then
  long_die "Can't determine current platform."
fi

if [ "$new_platform" = "$old_platform" ]; then
  long_log "Site is already running that platform." error
  long_prompt ""
  [ "$reply" != "y" ] && long_die "Not continuing." 0
fi

# Remove Settings for which we use the default CiviCRM
# values.
#if [ "$new_platform" = "ourpowerbase-d7-c4.7" ]; then
#fi

# Empty sessions table for quicker restore and to ensure everyone is 
# logged out for upgrade.
long_prompt "Truncating sessions table"
[ "$reply" = "y" ] && long_clear_sessions "$site"

# Make a backup so we can restore in case of error. If backup fails exit
# with error.
long_prompt "Making a backup..."
if [ "$reply" = "y" ]; then
  (longshore site-backup "$site" "preupgrade") || long_die "Failed to backup site."
fi

long_prompt "Entering maintenance mode..."
[ "$reply" = "y" ] && long_exec_drush_cmd "$site" "-y vset maintenance_mode 1"

long_prompt "Stopping and removing site container..."
if [ "$reply" = "y" ]; then
  docker stop "$site"
  docker rm "$site"
fi

long_prompt "Launching new container with new platform"
[ "$reply" = "y" ] && long_container_up site "$site" "$db_host" "$new_platform"

long_prompt "Reload nginx"
[ "$reply" = "y" ] && long_nginx_reload 

# For the upgrade, force LONG_LOG_LEVEL to info to ensure we get the most
# information possible on a failure.
old_log_level="$LONG_LOG_LEVEL"
LONG_LOG_LEVEL=info

# Run the upgrade in a loop - so if there is a failure we can
# restore the database and try again.
while [ 1 ]; do 
  # Don't use long_prompt - we don't want it to be possible to automate
  # the answers to these questions.
  long_always_prompt "Upgrading civicrm database..."
  if [ "$reply" = "y" ]; then
    long_exec_drush_cmd "$site" "-y civicrm-upgrade-db" 

    long_always_prompt "Was the upgrade successful?"
    [ "$reply" = "y" ] && break
    long_always_prompt "Restore database from backup so you can try again?"
    if [ "$reply" = "y" ]; then
      long_log "Importing from backup. This will take a while" info
      (longshore site-import "$site") || long_die "Failed to restore the backup."

      long_always_prompt "Entering maintenance mode..."
      [ "$reply" = "y" ] && long_exec_drush_cmd "$site" "-y vset maintenance_mode 1"
    fi
  else
    # If we are not upgrading, break out of while loop.
    break
  fi
done

# Reset to previous log level.
LONG_LOG_LEVEL="$old_log_level"

long_prompt "Removing maintenance mode..."
[ "$reply" = "y" ] && long_exec_drush_cmd "$site" "-y vset maintenance_mode 0"

long_prompt "Running site-configure..."
[ "$reply" = "y" ] && long_configure_site "$site" 
