#!/bin/bash

long_usage_message="usage: $(basename $0) site-cron <site> <action>
Runs drupal, civimail, and civicrm cron job on the specified site or all
sites on this frontend of site is ommitted.

Arguments
  <site> - Pass either the site you want to run on or --all for all on the
given sibling
  <action> - Which cron job to run. Either drupal, civimail or civicrm. If you
  pass civicrm it will run all civi jobs, including civimail."

long_check_args "$2" "$#" 2

# This scripts is designed to be run by a cron job. We are aiming for the following
# times:
#
# drupal: all drupal cron jobs (typically none) every 4 hours
# civicrm: all civicrm cron jobs, including mail and sms every 30 minutes
# civimail: only civimail and civisms every 5 minutes (exluding 30 and 00)
#
# If the site is specified, run on that site (must be on the right sibling).
# However, if --all is specificed, run for all sites on this, and only this,
# sibling (so it can be called by a cron job and not overlap with the other
# siblings).

# Additinally, if we are called without specifying "site" - then we run for all
# sites *in parallel* by calling this script a second time with the site
# specified followed by "&" to back ground the process. We take this step
# because we don't want one stuck cron job to stop other cron jobs from being
# executed.

sites="$2"
action="$3"
background=no

if [ "$sites" = "--all" ]; then
  # --all is specified, so we iterate over all of them, backgrounding
  # each one.
  background=yes
  hostname=$(hostname)
  long_set_sites "$hostname"
  sites="$LONG_SITES"
fi

if [ "$action" != "drupal" -a "$action" != "civimail" -a "$action" != "civicrm" ]; then
  long_die "Please pass drupal, civimail or civicrm as the action."
fi

sleep_time=0

# We want to spread out the cron jobs depending on how frequently they are run. This
# helps us keep the CPU usage more consistent and avoid giant spikes on each cron job
# run.
if [ "$action" = "drupal" ]; then
  sleep_time="60"
elif [ "$action" = "civicrm" ]; then
  sleep_time="10"
elif [ "$action" = "civimail" ]; then
  sleep_time="3"
fi

for site in $sites; do
  if [ "$background" = "yes" ]; then
    # Sleep for a brief interval between each job to avoid having all jobs hitting
    # the server at exactly the same time.
    sleep "$sleep_time" 
    $LONG_SRV/bin/longshore site-cron "$site" "$action" &
    continue
  fi

  # If the site is not running we can't run cron.
  if ! long_container_running "$site"; then
    long_log "Not executing cron for %s because it is not running." info "$site"
    continue
  fi

  # Keep track of whether there is an error running this cron job or not.
  err=0
  declare -i start_ts=$(date +%s)

  if [ "$action" = "drupal" ]; then
    long_exec_drush_cmd "$site" "core-cron"
  elif [ "$action" = "civimail" ]; then
    long_exec_in_container "$site" "/usr/local/bin/cv api job.process_mailing --user=admin --cwd=/var/www/powerbase" >/dev/null
    if [ "$?" -eq "0" ]; then
      long_exec_in_container "$site" "/usr/local/bin/cv api job.process_sms --user=admin --cwd=/var/www/powerbase" >/dev/null
    fi
  elif [ "$action" = "civicrm" ]; then
    long_exec_in_container "$site" "/usr/local/bin/cv api job.execute --user=admin --cwd=/var/www/powerbase" >/dev/null
  fi

  if [ "$?" -ne "0" ]; then
    err="$?"
  fi
  declare -i end_ts=$(date +%s)

  if [ "$err" -ne "0" ]; then
    msg=$(printf "Site: %s. Error running cron job.\n" "$site")

    # Log it.
    logger -t powerbase "$msg"

    # Email it.
    echo $msg | \
      /usr/bin/mail -s "PowerBase site with cron job failing to run" \
      pb-alert-warning@progressivetech.org
  fi
done
