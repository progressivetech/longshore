#!/bin/bash

long_usage_message="usage: $(basename $0) site-cron [<site>]
Runs both the drupal and CiviCRM cron job on the specified site or all
sites on this frontend of site is ommitted.

Arguments
  <site> - Optionally pass the site if you only want to run cron on that site."

long_check_args "$2" "$#" 0

# This scripts is designed to be run by a cron job that runs every 10 minutes.

# If the site is specified, run on that site regardless of which sibling it is
# on. However, if the site is not specified, run for all sites on this, and
# only this, sibling (so it can be called by a cron job and not overlap with the
# other siblings).

if [ -n "$2" ]; then
  sites="$2"
else
  hostname=$(hostname)
  long_set_sites "$hostname"
  sites="$LONG_SITES"
fi
for site in $sites; do
  # This command never has more arguments than site-cron and the site. And
  # if we just pass "$@" like we do for the other commands, we will lose
  # the <site> if this command was called without a site argument.
  long_rerun_over_network site-cron "$site" && continue
  # If the site is not running we can't run cron.
  if ! long_container_running "$site"; then
    long_log "Not executing cron for %s because it is not running." info "$site"
    continue
  fi

  declare -i start_ts=$(date +%s)
  long_exec_drush_cmd "$site" "core-cron"
  declare -i end_drupal_ts=$(date +%s)
  long_exec_drush_cmd "$site" "-u 1 -r /var/www/powerbase civicrm-api job.execute auth=0 -y"
  declare -i end_ts=$(date +%s)

  # Check for cron jobs that take longer then 20 minutes to complete.
  declare -i elapsed=$(( $end_ts - $start_ts ))
  declare -i limit=$(( 60 * 20 ))
  if [ $elapsed -gt $limit ]; then
    # Generate human readable numbers.
    drupal_elapsed_minutes=$(echo "($end_drupal_ts - $start_ts)/60" | bc)
    civicrm_elapsed_minutes=$(echo "($end_ts - $end_drupal_ts)/60" | bc)


    msg=$(printf "Site: %s. Total elapsed: %s. It took %s minutes to complete the drupal cron job and %s minutes to complete the civicrm cron job.\n" \
      "$site" "$elapsed" "$drupal_elapsed_minutes" "$civicrm_elapsed_minutes")

    # Log it.
    logger -t powerbase "$msg"

    # Email it.
    echo $msg | \
      /usr/bin/mail -s "PowerBase site with slow cron job" \
      pb-alert-warning@progressivetech.org

  fi
done
