#!/bin/bash

long_usage_message="usage: $(basename $0) site-transfer <site> <sibling>
Move a site from the current sibling to a new sibling.

Arguments
  <site> - The site to transfer.
  <sibling> - The sibling to transfer the site to."

long_check_args "$2" "$#" 2

site="$2"
sibling="$3"
db_host="$4"

# Run some sanity checks.
if [ ! -d "${LONG_SRV}/services/sites/${site}" ]; then
  # See if it is disabled. We could be re-running after having disabled
  # it.
  if [ ! -d "${LONG_SRV}/services/sites.disabled/${site}" ]; then
    long_die "Site doesn't exist (%s)." 1 "$site"
  fi
fi

# We may want to continue even though ths site is not running, if
# we are continuing after a failure on the first run. However, 
# usually this is an error and it should stop the script from
# continuing, so the default is to stop the script.
if ! long_container_running "$site"; then
  long_prompt "Stopping because site is not running..."
  if [ "$reply" = "y" ]; then
    long_die "Please start the site before migrating"
  fi
fi

# Record existing platform
long_set_site_platform "$site"
platform="$LONG_SITE_PLATFORM"

if [ -z "$db_host" ]; then
  db_host=$(long_set_default_db "$site")
fi


# Empty sessions table for quicker restore and to ensure everyone is 
# logged out for upgrade.
long_prompt "Truncating sessions table"
[ "$reply" = "y" ] && long_clear_sessions "$site"

long_prompt "Entering maintenance mode..."
[ "$reply" = "y" ] && long_exec_drush_cmd "$site" "-y vset maintenance_mode 1"

# Make a backup 
long_prompt "Making a backup..."
if [ "$reply" = "y" ]; then
  (longshore site-backup "$site") || long_die "Failed to backup site."
fi

me=$(hostname)
backup_target_path="${LONG_SRV}/ptp-backups/${me}/${site}.daily.tar.gz"

long_prompt "Copying backup to new sibling..."
if [ "$reply" = "y" ]; then
  scp "${LONG_SRV}/backups/${site}.daily.tar.gz" "${sibling}.mayfirst.org:${backup_target_path}" || long_die "Failed to copy backup"
fi

long_prompt "Disabing site on old sibling..."
if [ "$reply" = "y" ]; then
  long_disable_site "$site"
fi

long_prompt "Restoring site on new sibling..."
if [ "$reply" = "y" ]; then
  ssh -tt "${sibling}.mayfirst.org" "${LONG_SRV}/bin/longshore site-restore '$site' '$backup_target_path' '$db_host' '$platform'"
  ssh -tt "${sibling}.mayfirst.org" "${LONG_SRV}/bin/longshore site-drush '$site' '-y vset maintenance_mode 0'"
fi

long_prompt "Destroying local copy of site..."
if [ "$reply" = "y" ]; then
  long_destroy_site "$site"
fi
