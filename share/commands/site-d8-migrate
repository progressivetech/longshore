#!/bin/bash

long_usage_message="usage: $(basename $0) site-d8-migrate <d8site> [skip]
Migrate the Drupal data from a D7 to D8 site. Pass in the d8 site name.

Arguments
  <d8site> - The site you want to provision a d8 site for, e.g. ptpd8
  skip - Optionally pass skip if you want to skip loading the slow webform submissions
"
long_check_args "$2" "$#" 1

d8site="$2"
skip="$3"

if [ -n "$skip" ] && [ "$skip" != "skip" ]; then
  long_die "Please pass skip as the third argument or nothing at all."
fi

d7site=$(echo "$d8site" | sed 's/d8$//')

# Make sure we didn't pass the d7 site in as the first argument on accident.

if [ "$d8site" = "$d7site" ]; then
  long_die "Please pass in the d8 site as the first argument, not the d7 site."
fi

# Make sure the webform migration files have been copied
long_set_site_platform "$d8site"
long_set_site_platform_path

# Ensure our migration database settings are present.
d8_local_settings="${LONG_SRV}/services/sites/${d8site}/drupal/local.settings.php"
d7_settings="${LONG_SRV}/services/sites/$d7site/drupal/settings.php"
if ! grep --quiet 'migrate' "$d8_local_settings"; then
  password=$(grep "^ *'password'" "$d7_settings" | egrep -o "'[^']+',\$" | tr -d "'" | head -c -2)
  printf "
\$databases['migrate']['default'] = [
  'database' => '%s',
  'username' => '%s',
  'password' => '%s',
  'prefix' => '',
  'host' => 'mysqlhost',
  'port' => '',
  'namespace' => 'Drupal\\Core\\Database\\Driver\\mysql',
  'driver' => 'mysql',
];\n" "$d7site" "$d7site" "$password" >> "$d8_local_settings"
fi

# Ensure our private files setting is added.
if ! grep --quiet 'file_private_path' "$d8_local_settings"; then
  printf "
\$settings['file_private_path'] = \$app_root . '/sites/default/private';\n" >> "$d8_local_settings"
fi

# Ensure webform_components doesn't have any entries that will cause problems.
long_exec_drush_cmd "$d7site" "lsd-prepare-webform-migration"


#  * webform_migrate: the main module for migrating webform. Still in alpha. PTP maintains a repo
#    so we can have the d7_webform_node:webform migration to get the nodes. See 
#    https://www.drupal.org/project/webform_migrate/issues/3308959
#  * webform_migrate_plus: really? Another module that fixes something missing from webform_migrate.
#    And, of course, we have to maintain a repo to fix php8.1 notices
#  * webform_civicrm_migrate: pulls in the CiviCRM specific bits of webforms. PTP maintains a repo
#    that brings in some of the un-merged PR's (https://github.com/fuzionnz/webform_civicrm_migrate)

long_exec_drush_cmd "$d8site" "pm:enable -y webform_migrate webform_migrate_plus webform_civicrm_migrate"
if [ "$LONG_LIVE" = "n" ]; then
  domain="https://$d7site.loc.cx"
else
  domain="https://$d7site.ourpowerbase.net"
fi

# d7_webform upgrades the webforms as webform entities, but not the nodes.
#
# d7_webform_node:webform comes from webform_migrate and imports the webform
# nodes along with the name of the webform that should be attached to them
# (which doesn't happen if you use the generic drupal node migrate code).

migrations="
  system_site
  d7_system_date
  d7_user_role
  d7_user
  d7_filter_format
  d7_webform
"

# d7_node_type
# d7_webform_node:webform

if [ -z "$skip" ]; then
  migrations="${migrations} d7_webform_submission"
fi

#  upgrade_d7_webform_node_webform
for migration in $migrations; do
   long_log "Running migrate:import on %s\n" "info" "$migration"
   long_exec_drush_cmd "$d8site" "migrate:import $migration"
   long_log "Completed migrate:import on %s\n" "info" "$migration"
done

# Update webform path aliases so the old aliases point to the new
# webform link.
long_log "Updating webform aliases" "info"
long_exec_drush_cmd "$d8site" "lsd:migrate-webform-aliases"

# Now let's copy themes.
d7_themes="${LONG_SRV}/services/sites/${d7site}/drupal/themes"
d8_themes="${LONG_SRV}/services/sites/${d8site}/drupal/themes"

mkdir -p "$d8_themes"
for theme_name in $(ls "$d7_themes" | grep -iv readme); do
  long_log "Checking: %s theme" "info" "$theme_name"
  theme_path="${d8_themes}/${theme_name}"
  if [ -d "$theme_path" ]; then
    # Already converted.
    long_log "%s theme already converted" "info" "$theme_name"
    continue
  fi
  long_log "Converting: %s theme" "info" "$theme_name"
  mkdir "$theme_path"
  cp "${LONG_SRV}/share/templates/theme.info.yml" "${theme_path}/${theme_name}.info.yml"
  sed -i "s/LONG_THEME_NAME/${theme_name}/g" "${theme_path}/${theme_name}.info.yml"
  cp "${LONG_SRV}/share/templates/theme.libraries.yml" "${theme_path}/${theme_name}.libraries.yml"

  mkdir -p "${theme_path}/config/install"
  cp "${LONG_SRV}/share/templates/theme_site_branding.yml" "${theme_path}/config/install/block.block.${theme_name}_site_branding.yml"
  sed -i "s/LONG_THEME_NAME/${theme_name}/g" "${theme_path}/config/install/block.block.${theme_name}_site_branding.yml"

  mkdir "${theme_path}/css"
  cp "${d7_themes}/${theme_name}/${theme_name}.css" "${theme_path}/css/style.css"
  cp "${d7_themes}/${theme_name}/${theme_name}-logo.png" "${theme_path}/"
  long_exec_drush_cmd "$d8site" "lsd:prepare-theme --name=$theme_name"
  long_exec_drush_cmd "$d8site" "lsd:migrate-theme-logo --name=$theme_name"
done

# Now upgrade themekey
long_exec_drush_cmd "$d8site" ctn:importd7

# Lastly drop the civicrm installation canary table if it exists
temp=$(mktemp)
printf 'DROP TABLE IF EXISTS `civicrm_install_canary`' >> "$temp"
long_execute_site_query "$d8site" "$temp"
rm -f "$temp"
