#!/bin/bash

long_usage_message="usage: $(basename $0) image-upgrade <type> [<action>]
Check all images for upgrades. If there are upgrades, force the
rebuild of the image (if action is default upgrade) or print packages
that are out of date if action is print. Pass LONG_FORCE=1 to 
rebuild the image even if there are no new upgrades.

Arguments
  <type> - The image type you want to upgrade (ptp-mysql, etc.) or '--all'
    to create all images
  <action> - Indicate whether you want to upgrade (default) or just print
    packages that are out of date."

long_check_args "$2" "$#" 1

itypes="$2"
action="$3"

if [ -z "$action" ]; then
  action=upgrade
fi

if [ "$action" != "upgrade" -a "$action" != "print" ]; then
  long_die "Action should be either upgrade or print, not %s." "$action"
fi

if [ "$action" = "print" -a "$LONG_FORCE" = "1" ]; then
  long_die "Don't pass LONG_FORCE if you want to print the packages."
fi

possible_itypes="my-${LONG_DEBIAN_VERSION} ptp-mysql ptp-php ptp-powerbase"

if [ "$itypes" = "--all" ]; then
  itypes="$possible_itypes"
fi

for itype in $itypes; do
  if ! echo "$possible_itypes" | egrep "(^| )$itype( |\$)" > /dev/null; then
    long_die "Unknown image type %s." 1 "$itype"
  fi
done

for itype in $itypes; do
  packages=
  if [ "$LONG_FORCE" != "1" ]; then
    long_log "Checking for upgrade in %s image." info "$itype"
    packages=$(docker run --name upgrade "$itype" bash -c 'apt-get -qq update && apt-get -qq -s dist-upgrade' | awk '/^Inst/ { print $2 }')

    # Output to /dev/null to avoid docker printing the name of container
    # we just deleted.
    docker rm upgrade > /dev/null

    if [ "$action" = "print" ]; then
      [ -z "$packages" ] && packages="No packages to upgrade."
      printf "%s\n" "$packages"
      continue
    fi
  fi

  if [ "$LONG_FORCE" = "1" -o -n "$packages" ]; then
    # Re-build the image
    long_log "Forced, or found packages needing to be upgraded in %s image; rebuilding." info "$itype"
    LONG_FORCE=1
    long_create_image "$itype"
  fi
done

# Remove left over images.
long_log "Removing dangling images." info
danglers=$(docker images -q --filter "dangling=true")
if [ -n "$danglers" ]; then
  for dangler in $danglers; do
    # We don't care about errors in images that could not be deleted because they are in use.
    docker $LONG_DOCKER_LOG_ARG rmi "$dangler" 2>&1 | egrep -v "(conflict: unable to delete|Conflict, cannot delete|Error: failed to remove one or more images|Deleted: )"
  done
fi
