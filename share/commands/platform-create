#!/bin/bash

long_usage_message="usage: $(basename $0) platform-create <make-file-path> [<built-platform-path>]
Build a new platform based on the given makefile and copy it into place.
Optionally, copy the built platform to other servers. Set LONG_RUN_DB_UPDATE=0
or LONG_RUN_DB_UPDATES=1 to avoid the prompt.

Arguments:
 <make-file-path> path to a drush make file.
 <built-platform-path> - optionally pass the path of an already built platform
   in which case we won't drush make it from scratch, we will use the 
   already built one. NOTE: you must still pass the make-file-path even 
   if it's not being used so we can determine the path of the platform.
   Also NOTE: the built-platform-path will be deleted when we finish.
   It should be a temporary directory. This option is used when copying
   a built platform to other servers."

long_check_args "$2" "$#" 1

base=${LONG_SRV}/platforms
makefile_path="$2"
source_platform_path_temp="$3"

if [ -z "$LONG_RUN_DB_UPDATES" ]; then
  long_prompt "Skip DB updates after installing platform?"
  if [ "$reply" = "y" ]; then
    LONG_RUN_DB_UPDATES=0
    long_log "Not running database updates." info
  else
    LONG_RUN_DB_UPDATES=1
    long_log "Running database updates." info
  fi
fi

# By default, we should prompt the user to sync the platform to other servers.
sync=y

if [ -n "$source_platform_path_temp" ]; then
  # If we are passing a build platform path, do some sanity checking.
  [ -d "$source_platform_path_temp" ] || long_die "Can't find build-platform-path."
  [ -f "${source_platform_path_temp}/index.php" ] || long_die "The source-platform-path doesn't seem valid."

  # The typical use case when we are passing a build platform path is that
  # we are in the process of being sync'ed from another server. So, don't
  # bother prompting to sync on this run.
  sync=n
fi

mkdir -p "$base"

# Drush make expects absolute path to make file
first=$(echo "${makefile_path:0:1}")
if [ "$first" != "/" ] && [ "$first" != "~" ]; then
  makefile_path="$(pwd)/$makefile_path"
fi

if [ ! -f "$makefile_path" ]; then
	long_die "Can't find makefile path: %s\n"  1 "$makefile_path"
	exit
fi

makefile=$(basename "$makefile_path")
source_platform_path="${base}/${makefile}"

# If we don't already have a built platform path, then build one.
if [ -z "$source_platform_path_temp" ]; then
  source_platform_path_temp=$(mktemp -d --tmpdir="$base")

  long_log "Creating platform." info
  cd "$source_platform_path_temp"
  $LONG_DRUSH -q -y make "$makefile_path"

  # Do a sanity check. drush make will not leave any files in the target
  # if just one download failed.

  if [ ! -f "${source_platform_path_temp}/index.php" ]; then
    long_die "Failed to make the site!"
  fi

  # Hackish way to get symlink to wkhtmltopdf - which is needed if anyone
  # enables the print module
  ln -s /usr/bin/wkhtmltopdf "${source_platform_path_temp}/sites/all/libraries/"

  # The CiviCRM extensions directory is in sites/all/extensions, which is
  # sensible. However, CiviCRM will want to create a tmp and cache directory
  # in that directory to keep information about the extensions for the given
  # site. The php user can't write to this directory, so we create a symlink
  # to the default sites directory where the PHP user can write.
  ln -s ../../../default/private/extensions/tmp  \
    "${source_platform_path_temp}/sites/all/extensions/tmp"
  ln -s ../../../default/private/extensions/cache  \
    "${source_platform_path_temp}/sites/all/extensions/cache"

  # And more hacks... The CiviMobile extension will try to include js files
  # expecting to be installed in com.webaccessglobal.module.civimobile, however
  # we have it installed in civimobile. Create symlink.
  extension_maps='civimobile:com.webaccessglobal.module.civimobile'
  cd "${source_platform_path_temp}/sites/all/extensions"
  for map in $extension_maps; do
    source=$(echo "$map" | cut -d: -f1)
    target=$(echo "$map" | cut -d: -f2)
    ln -s "$source" "$target"
  done
  cd "${source_platform_path_temp}"

  # There is a complicated process for taking a CiviCRM git repo and turning it
  # into a safe and functional folder that can be used on a production CiviCRM
  # site. Our strategy is to use as much code as possible from the distmaker
  # bash utility that is used by the core developers to create the official
  # tarballs.
  long_log "Running distmaker..." info

  # For easier compatibility with distmaker - using their variable names.
  TRG=$(mktemp -d)
  SRC="${source_platform_path_temp}/sites/all/modules/civicrm"

  distmaker_functions="${SRC}/distmaker/dists/common.sh"
  [ ! -f "$distmaker_functions" ] && long_die "The distmaker common functions file doesn't exist."
  source "$distmaker_functions"

  if [ "$makefile" != "ourpowerbase-d7-c4.5" ]; then
    # These functions only available in ourpowerbase-d7-c4.6 and higher.
    long_log "Running dm_generate_vendor" info
    dm_generate_vendor "$SRC" > /dev/null || long_die "Failed to dm_generate_vendor"

    long_log "Running dm_generate_bower" info
    dm_generate_bower "$SRC" > /dev/null || long_die "Failed to dm_generate_bower"
  else
    # This needs to be set for c4.5 for some reason.
    DM_RSYNC=/usr/bin/rsync
  fi

  long_log "Running GenCode" info
  cwd=$(pwd)
  cd "$SRC/xml"
  php GenCode.php schema/Schema.xml > /dev/null || long_die "Failed to GenCode.php"

  long_log "Resetting TRG directory" info
  dm_reset_dirs "$TRG"

  # Figure out the current version from civicrm-version.php
  DM_VERSION=$(grep version_no $SRC/xml/version.xml | egrep -o '[0-9.]+')
  long_log "Running dm_generate_version (%s)" info "$DM_VERSION"
  cp $SRC/drupal/civicrm.config.php.drupal $TRG/civicrm.config.php
  dm_generate_version "$TRG/civicrm-version.php" Drupal

  long_log "Running dm_install_core" info
  dm_install_core "$SRC" "$TRG" > /dev/null || long_die "Failed to dm_install_core"

  long_log "Running dm_install_packages" info
  dm_install_packages "$SRC/packages" "$TRG/packages" > /dev/null || long_die "Failed to dm_install_packages"

  if [ "$makefile" != "ourpowerbase-d7-c4.5" ]; then
    # These functions only available in ourpowerbase-d7-c4.6 and higher.
    long_log "Running dm_install_vendor" info
    dm_install_vendor "$SRC/vendor" "$TRG/vendor" > /dev/null || long_die "Failed to dm_install_vendor"

    long_log "Running dm_install_bower" info
    dm_install_bower "$SRC/bower_components" "$TRG/bower_components" >/dev/null || long_die "Failed dm_install_bower"
  fi

  long_log "Running dm_install_drupal" info
  dm_install_drupal "$SRC/drupal" "$TRG/drupal" > /dev/null || long_die "Failed to dm_install_drupal"

  # Now download the internationalization file and unpack it.
  l10n_file="civicrm-${DM_VERSION}-l10n.tar.gz"

  l10n_url="https://download.civicrm.org/${l10n_file}"
  cd "$TRG"
  long_log "Downloading %s to %s." info "$l10n_url" "$TRG"
  wget -q "$l10n_url" || long_die "Failed to download l10n file (%s)." 1 "$l10n_url"
  tar -xzf "$l10n_file" || long_die "Failed to unpack l10n file (%s)." 1 "$l10n_file"
  # Unpacking creates a civicrm folder with an l10n and sql folder inside. However,
  # we are already in the base civicrm folder - so we have to move these files and
  # directories up one level.
  mv civicrm/l10n .
  mv civicrm/sql/* sql/
  rmdir civicrm/sql
  rmdir civicrm
  # Clean up the left over tar ball.
  rm "$l10n_file"

  # Kill our src civicrm directory and replace with our newly created one.
  # Avoid getcwd errors by switching to our original directory before deleting
  # this one.
  cd "$cwd"
  rm -rf "$SRC"
  long_log "Replacing civicrm with newly generated civicrm code." info
  mv "$TRG" "$SRC"
  rm -rf $TRG

  # Now, put our custom fonts in place. This allows for korean fonts in mailing
  # labels
  rsync -a "${LONG_SHARE}/fonts" "${source_platform_path_temp}/sites/all/libraries/"
fi

long_log "Moving platform into place." info
# mktemp will restrict read access - we need to ensure www-data on the
# container can read it.
chmod 0755 "$source_platform_path_temp"

# If the platform doesn't already exist - move it into place and we are done. 
if [ ! -d "$source_platform_path" ]; then
  mv "$source_platform_path_temp" "$source_platform_path"
else
  # It would be nice to do an atomic move, however, if the platform is being
  # used by a running container, we can't just move it out of the way. So, we
  # have to rsync and deal with the possibility that there may be a weird error
  # while the sync'ing is happened. I learned about the proper rsync arguments
  # by reading the output of `aubrsync -h`.
  rsync -aHSx --devices --specials --delete-before \
    "${source_platform_path_temp}/" \
    "${source_platform_path}/" 
fi

if [ "$LONG_RUN_DB_UPDATES" = "1" ]; then
  # Now ensure all sites have db updates run.
  for site in $(/srv/longshore/bin/longshore site-list $(hostname) ); do
    if long_container_running "$site"; then
      long_set_site_platform "$site"
      if [ "$LONG_SITE_PLATFORM" = "$makefile" ]; then
        /srv/longshore/bin/longshore site-updatedb "$site"
      fi
    else
      long_log "Not updating non-running container (%s)" info "$site"
    fi
  done
fi

# See if we have other servers to copy the code to 
siblings="$LONG_SIBLINGS"
if [[ $(echo "$siblings" | wc -w) -lt "2" ]]; then
  # Don't prompt to sync if we have nobody to sync to.
  sync=n
fi

if [ "$sync" = "y" ]; then
  long_prompt "rsync'ing platform to other siblings."
  if [ "$reply" == "y" ]; then
    # Copy to all siblings in parallel
    long_log "Creating temp directory on '%s' in parallel\n" "info" "$siblings"
    echo $siblings | tr " " "\n" | \
      parallel -v ssh $LONG_HOST_USER@{}.mayfirst.org \
      "mkdir -p $source_platform_path_temp"
    if [ "$?" != "0" ]; then
      rm -rf "$source_platform_path_temp"
      long_die "Failed to create directories on %s" 1 "$frontend" 
      return
    fi 

    long_log "Rsyncing to %s in parallel\n" "info" "$siblings"
    echo $siblings | tr " " "\n" | \
      parallel -v rsync -a "$source_platform_path_temp/" \
      "$LONG_HOST_USER@{}.mayfirst.org:$source_platform_path_temp"
    if [ "$?" != "0" ]; then
      rm -rf "$source_platform_path_temp"
      long_die "Failed to create directories on %s" 1 "$frontend" 
      return
    fi

    long_log "Running platform-create on siblings (%s)." info "$siblings"
    echo $siblings | tr " " "\n" | \
      parallel -v ssh -t \
      "$LONG_HOST_USER"@{}.mayfirst.org \
      LONG_RUN_DB_UPDATES=$LONG_RUN_DB_UPDATES \
      /srv/longshore/bin/longshore \
      platform-create "$makefile_path" "$source_platform_path_temp"
    if [ "$?" != "0" ]; then
      rm -rf "$source_platform_path_temp"
      long_die "Failed to run platform-create on siblings: %s" 1 "$siblings" 
      return
    fi
  fi
else
  long_log "No siblings to rsync with." "info"
fi

# Clean up.
rm -rf "$source_platform_path_temp"

