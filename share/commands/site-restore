#!/bin/bash

long_usage_message="usage: $(basename $0) site-restore <site> <path> [<platform>]
Setup a new site from the files in the backed up tar ball provided by the
<path> argument. This command ensures that the new site is installed on the
provided database (not necessarily the same database as the one specified
in the backup). Can be used to clone and rename sites.

Arguments
  <site> - The site you want to restore. Might be different from tar ball. 
  <path> - The path to the tar ball containing the backup.
  <platform> - Optionally provide the platform. If ommitted use the 
  default platform."

long_check_args "$2" "$#" 2

site="$2"
path="$3"
platform="$4"

[ -z "$platform" ] && platform="$LONG_DEFAULT_PLATFORM"

long_set_default_db "$site"
db="$LONG_DEFAULT_DB"

long_container_exists "$site" && long_die "The site '%s' already exists. \
  Please site-destroy it before restoring it." 1 "$site"

[ -d "${LONG_SRV}/services/sites/$site" ] && long_die "There are still files \
  from that site in the services/sites directory. Please remove them first." 1

if [ ! -f "$path" ]; then
  long_die "Can't find the path to the backup (%s)." 1 "$path"
fi

long_prompt "Restoring to: %s\nBackup: %s\nDB: %s\nPlatform: %s" "$site" "$path" "$db" "$platform"

if [ "$reply" = "y" ]; then
  # The tar ball may not be the same site as the one we are creating (e.g.
  # if we are creating a clone site from a backup of a live site).

  # What is the name of the site we are unpacking?
  bak_basename=$(basename "$path")
  bak_site=$(echo "$bak_basename" | cut -d. -f1)

  # Unpack it.
  temp=$(mktemp -d)
  cd "$temp"
  long_log "Extracting backup file" info
  tar -xzf "$path" || long_die "Failed to unpack tar ball"

  # Path to newly created site.
  site_path="${LONG_SRV}/services/sites/${site}"

  # Old style backups (prior to 2015-08-01) will be named after the full
  # domain (e.g. ptp.ourpowerbase.net) and untar into the root directory.
  # New style backups will be named after the subdomain (ptp) and unpack
  # into a directory named after the site.
  unpacked_dir=
  db_path=
  if expr "$bak_basename" : .*ourpowerbase\.net.* >/dev/null; then
    # Backup basename has ourpowerbase.net in it, it's old style.
    unpacked_dir="$temp"
    long_log "Gzipping database to be consistent new backup format." info
    gzip "${temp}/database.sql"
    # After we move the files into place, this is where the db will end up.
    db_path="${site_path}/database.sql.gz"
  else
    [ ! -d "${temp}/${bak_site}" ] && long_die "Failed to find bak_site directory (%s)" 1 "${temp}/${bak_site}"
    unpacked_dir="${temp}/${bak_site}"
    # After we move the files into place, this is where the db will end up.
    db_path="${site_path}/backup/${bak_site}.sql.gz"
  fi

  # Move it into place
  mkdir "$site_path"
  mv "${unpacked_dir}"/* "${site_path}/"

  cd "$HOME"
  rm -rf "$temp"

  # Remove the db/server specific files
  rm -f "${site_path}/my.cnf"
  rm -f "${site_path}/env/PORT"
  rm -f "${site_path}/drupal/settings.php"
  rm -f "${site_path}/drupal/civicrm.settings.php"

  # Rename/move the backup database if necessary
  if [ "$bak_site" != "$site" ]; then
    mkdir -p "${site_path}/backup"
    mv "$db_path" "${site_path}/backup/${site}.sql.gz"
  fi

  long_log "Creating site" info
  long_create_container site "$site" "$db" "$platform"
  docker start "$site"
  long_setup_site "$site"
  long_exec_drush_cmd "$site" "lsd-admin-password"
  long_nginx_reload

  long_prompt "Updating DNS"
  if [ "$reply" = "y" ]; then
    long_create_dns "$site"
  else
    long_log "Not updating DNS."
  fi
  long_clear_cache "$site" all
else
  long_log "Cancelled restore." info
fi
