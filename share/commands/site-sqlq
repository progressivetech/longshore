#!/bin/bash

long_usage_message="usage: $(basename $0) site-sqlq <site> <query>
Run the given query in the site's database.

Arguments
  <site> - The site database to run the query
  <query> - The SQL statement to run. Either pass directly or 
    pass the name of a file."

long_check_args "$2" "$#" 1

site="$2"

# To avoid complicating quoting issues - accept all remaining
# arguments as part of the query.
shift 2
query="$@"

long_check_site_exists "$site" || long_die "Site doesn't exist (%s)." 1 "$site"

# Re-run over network manually to manage quoting problems
long_set_site_sibling "$site"

if [ -z "$LONG_SITE_SIBLING" ]; then
  # This could mean the site name was mis-typed.
  long_die "Can't determine where to run this command because site doesn't have sibling (%s)." 1 "$site"
fi

me=$(hostname)

if [ "$LONG_SITE_SIBLING" = "$me" ]; then
  # run locally
  cleanup=0
  if [ ! -f "$query" ]; then
    temp=$(mktemp)
    echo "$query" > "$temp"
    query="$temp"
    cleanup=1
  fi
  long_execute_site_query "$site" "$query"

  # Only cleanup if we created a temp file.
  [ "$cleanup" -eq 1 ] && rm "$query"
else
  # run over the network
  # Ensure the host is reachable.
  if ! long_is_host_reachable "${LONG_SITE_SIBLING}.mayfirst.org"; then
    long_die "The sibling I was trying to run this command on (%s) is not reachable." \
      1 "${LONG_SITE_SIBLING}.mayfirst.org"
  fi
  ssh "${LONG_SITE_SIBLING}.mayfirst.org" /srv/longshore/bin/longshore site-sqlq "$site" "$query"
  if [ "$?" != "0" ]; then
    long_log "Rerunning %s for site %s over network failed." error "site-sqlq" "$site"
  fi
fi

