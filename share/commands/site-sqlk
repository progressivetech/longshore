#!/bin/bash

long_usage_message="usage: $(basename $0) site-sqlk <site>
Warn of long running sql queries.

Arguments
  <site> - The site database to run against or --all.
"
long_check_args "$2" "$#" 1

sites="$2"

warning_secs=$(( 30 * 60 ))
critical_secs=$(( 120 * 60 ))
kill_secs=$(( 180 * 60 ))

if [ "$sites" = "--all" ]; then
  long_set_sites
  sites="$LONG_SITES"
fi

for site in $sites; do
  long_check_site_exists "$site" || long_die "Site doesn't exist (%s)." 1 "$site"

  declare -i time
  /srv/longshore/bin/longshore site-sqlt "$site" | egrep '[0-9]' | while read pid user host db command time therest; do
    [ "$command" = "Sleep" ] && continue
    if [ -n "$time" ] && [ "$time" -gt "$warning_secs" ] && [ -n "$pid" ]; then
      if [[ "$pid" =~ ^[0-9]+$ ]]; then
        msg=$(printf "The database %s has a process running for %s seconds. Kill with: longshore site-sqlt %s %s.\n" $db $time $db $pid)
        if [ "$time" -lt "$critical_secs" ]; then
          long_log "Warning: ${msg}" info
          echo "$msg" | /srv/longshore/bin/longshore notify warning
        elif [ "$time" -lt "$kill_secs" ]; then
          long_log "Critial: ${msg}" info
          echo "$msg" | /srv/longshore/bin/longshore notify critical 
        else
          msg=$(printf "Query killed after %s with: longshore site-sqlt %s %s.\n" $time $db $pid)
          long_log "Kill: ${msg}" info
          echo "$msg" | /srv/longshore/bin/longshore notify critical
          /srv/longshore/bin/longshore site-sqlt "$db" "$pid"
        fi
      fi
    fi
  done
done
