#!/bin/bash

long_usage_message="usage: $(basename $0) site-info <site> [<-u>] [<-r>] [<-rh>] [<-f>]
Print all details about this site, including password. Optionally
update the PTP database with this information. Optionally, set the
PB_YEAR environment variable to get statistics for different years.
Optionally, output in report format or report format with header.

You can't pass both -u and -r/-rh. If you do, the first one specified
will be used.

Arguments
  <site> - The site on which to report or --all for all sites.
  <-f> - If -f is passed, output full statistics, including contacts count 
    (otherwise just output password and basic info)
  <-u> - If -u is passed, we will try to update the ptp database with 
  the login count, contacts count and hostname.
  <-r> - If -r is passed, output will be columnar. 
  <-rh> - If -rh is passed, output will be columnar with header. "

long_check_args "$2" "$#" 1

sites="$2"
option="$3"

# Don't skip non production sites by default
skip_regexp=
if [ "$sites" = "--all" ]; then
  long_set_sites
  sites="$LONG_SITES"

  # IF we are using --all, then we do want to skip nonproduction sites
  skip_regexp="$LONG_NON_PRODUCTION_REGEXP"
fi

if [ -n "$PB_YEAR" ]; then
  year="$PB_YEAR"
else
  year=$(date -d "last year" +%Y)
fi

if [ -n "$option" -a "$option" != '-u' -a "$option" != "-r" -a "$option" != "-rh" -a "$option" != "-f" ]; then
  long_die "I didn't understand the last argument. I was expecting -u or -r or -rh or -f but got %s." 1 "$option"
fi

if [ "$option" = "-rh" ]; then
  # Print the tabular header
  printf "Site\tDB\tPlatform\tSibling\tRecent Logins\tContacts\tContributions\tEmails sent\n"
fi


# Only calculate all totals if requested, to save time and resources.
full_output="n"
if [ "$option" = "-r" -o "$option" = "-u" -o "$option" = "-f" -o "$option" = "-rh" ]; then
  full_output="y"
fi

for site in $sites; do
  if [ -n "$skip_regexp" ]; then
    if echo "$site" | egrep "$skip_regexp" >/dev/null; then
      continue
    fi
  fi
  long_check_site_exists "$site" || long_die "Site doesn't exist (%s)." 1 "$site"
  if [ "$option" = "-rh" ]; then
    # If we want headers, we have already output them above, don't do it again
    # when running over the network.
    option="-r"
  fi
  # FIXME: how do we get a different PB_YEAR value over the network?
  long_rerun_over_network site-info "$site" "$option" && continue 

  mycnf="${LONG_SRV}/services/sites/${site}/my.cnf"
  pass=$(grep password= "$mycnf" | cut -d= -f2)
  user=$(grep user= "$mycnf" | cut -d= -f2)
  long_set_site_db_host "$site"
  long_set_site_platform "$site"
  long_set_site_memory "$site"

  if [ "$full_output" = "y" ]; then  
    long_set_site_contacts_count "$site"
    long_set_site_recent_logins_count "$site"
    long_set_site_contributions_sum "$site" "$year"
    long_set_site_emails_count "$site" "$year"
  fi

  sibling=$(hostname)
  if [ "$option" = "-u" ]; then
    # Call external longshore command to update the results
    ${LONG_SRV}/bin/longshore site-cv ptp PowerbaseUtilities.UpdateSiteStats "site=$site" "contacts=$LONG_SITE_CONTACTS_COUNT" "logins=$LONG_SITE_RECENT_LOGINS_COUNT" "sibling=$sibling"
  elif [ "$option" = "-r" ]; then
    # Report output - design to be imported into a spreadsheet program.
    printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" "$site" "$LONG_SITE_DB_HOST" "$LONG_SITE_PLATFORM" "$sibling" \
      "$LONG_SITE_RECENT_LOGINS_COUNT" "$LONG_SITE_CONTACTS_COUNT" "$LONG_SITE_CONTRIBUTIONS_SUM" "$LONG_SITE_EMAILS_COUNT";
  else
    # On screen output.
    printf "Site: %s\nDB User: %s\nPassword: %s\nDB: %s\nPHPMyAdmin URL: %s\nPlatform: %s\nSibling: %s\nPids: %s\nMemory: %s\n" \
      "$site" "$user" "$pass"  "$LONG_SITE_DB_HOST" "$LONG_PHPMYADMIN_URL" "$LONG_SITE_PLATFORM" "$sibling" \
      "$LONG_SITE_PIDS" "$LONG_SITE_MEMORY"

    if [ "$full_output" = "y" ]; then
      printf "Recent Logins: %s\nContacts: %s\nContributions: %s\nEmails sent: %s\n" \
        "$LONG_SITE_RECENT_LOGINS_COUNT" "$LONG_SITE_CONTACTS_COUNT" "$LONG_SITE_CONTRIBUTIONS_SUM" "$LONG_SITE_EMAILS_COUNT"
    fi
  fi
done
