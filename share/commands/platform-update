#!/bin/bash

long_usage_message="usage: $(basename $0) platform-update <make-file-path> <check> [<site>]
Test a given platform make file to see if any of the packages have available
updates or if any packages are not in use.

Arguments:
 <make-file-path> path to a drush make file.
 <check> either new or unused. Defaults to new.
 <site> optionally, indicate which site to test upgrades on. This site will 
   have the upgrade module enabled and then disabled when we're done. Without
   this option, drupal module updates are not checked." 

long_check_args "$2" "$#" 2

base=${LONG_SRV}/platforms
makefile_path="$2"
check="$3"
site="$4"


if [ "$check" != "new" -a "$check" != "unused" ]; then
  long_die "Please pass either new or unused as the check argument, not $check."
fi

# First check out all git repos and look for updates

if [ "$check" = "new" ]; then
  # Get a list of project names that use git to download source
  for project in $(grep  type "$makefile_path"  | grep git | cut -d[ -f2 | tr -d ']'); do
    # Get the url and revision
    url=$(grep -F "[$project][download][url]" "$makefile_path" | cut -d= -f2 | tr -d '" ')
    revision=$(grep -F "[$project][download][revision]" "$makefile_path" | cut -d= -f2 | tr -d '" ')
    # Skip repos I carefully handle by hand.
    if [ "$project" = "civicrm" -o "$project" = "civicrm_drupal" -o "$project" = "civicrm_packages" ]; then
      long_log "Skipping %s" info "$project"
      continue
    fi
    if [ -z "$url" ]; then
      long_log "Failed to find url for project (%s)" error "$project"
      long_log "Failed to find revision for project (%s)" error "$project"
    else
      temp=$(mktemp -d)
      cd "$temp"
      if ! git clone -q "$url" code; then
        long_log "Failed to checkout project %s" error "$project"
        cd
        rm -rf "$temp"
        continue
      fi
      cd code
      if [ "$project" = "opb" ]; then
        git checkout "7.x-1.x"
      fi
      commit=$(git log | head -n1 | cut -d\  -f2)
      if [ "$commit" != "$revision" ]; then
        long_log "Project %s needs update from %s to %s" error "$project" "$revision" "$commit"
      else
        long_log "Project %s is update to date" info "$project"
      fi
      cd
      rm -rf "$temp"
    fi
  done

  if [ -n "$site" ]; then
    # Now check drupal modules.
    long_exec_drush_cmd "$site" "ptp-update-report"
  fi
else
  # Check for unused modules and extensions.
  # Figure out the path to the platform. The platform must be build to use unused check.
  platform=$(basename "$makefile_path")
  path="${base}/${platform}"
  if [ ! -d "$path" ]; then
    long_die "Please build the platform before checking for unused extensions and modules."
  fi

  # Generate a list of drupal modules.
  addons=
  for module in $(ls "${path}/sites/all/modules"/*/*.info); do
    module=$(basename "$module" .info)
    if [ -n "$addons" ]; then
      addons="$addons,"
    fi
    addons="${addons}d:${module}"
  done
  # Generate a list of civi extensions 
  for module in $(ls "${path}/sites/all/extensions"/*/info.xml); do
    key=$(egrep -o 'key="[a-z0-9.-]+"' "$module" |sed 's/key=//' | tr -d '"')
    if [ -n "$addons" ]; then
      addons="$addons,"
    fi
    addons="${addons}c:${key}"
  done

  # Now, addons is a variable containing our initial list.
  sites=$(ssh longshore /srv/longshore/bin/longshore site-list)
  for site in $sites; do
    long_log "Checking: %s" info "$site"
    container=$(ptp-get-sibling "$site")
    echo ssh longshore@$container.mayfirst.org /srv/longshore/bin/longshore site-drush "$site" "'lsd-unused-addons --addons=$addons --include=uninstalled'"
    #addons=$(ssh longshore /srv/longshore/bin/longshore site-drush "$site" "lsd-unused-addons --addons=$addons --include=uninstalled")
    #longshore site-drush ptp "lsd-unused-addons --addons=$addons --include=disabled"
  done

  echo $addons;

fi
