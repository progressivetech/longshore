#!/bin/bash

long_usage_message="usage: $(basename $0)
Initialize a server to use longshore."
long_check_args "$2" "$#"

# A few sanity checks
user=$(whoami)
[ "$user" != "root" ] && long_die "You must run this command as root."

[ ! -e /srv/longshore/bin/longshore ] && long_die "You must have longshore installed in /srv/longshore/bin/longshore"

# Check what needs to be installed first.
docker=n
sudo=n
nginx=n
sudoers_file=n
longshore_user=n
php_user=n
openssl=n

install=
if ! dpkg -l docker.io 2>/dev/null | grep ^ii >/dev/null; then
  if ! dpkg -l lxc-docker 2>/dev/null | grep ^ii >/dev/null; then
    install=docker
  fi
fi

if ! dpkg -l sudo 2>/dev/null | grep ^ii >/dev/null; then
  install="$install sudo"
fi

if ! dpkg -l nginx 2>/dev/null | grep ^ii >/dev/null; then
  install="$install nginx"
fi

if [ -n "$LONG_TLS_KEY_PATH" ]; then
  if ! dpkg -l openssl 2>/dev/null | grep ^ii >/dev/null; then
    install="$install openssl"
  fi
fi

if [ -n "$install" ]; then
  long_prompt "Installing $install"
  [ "$reply" = "y" ] && apt-get update && apt-get install $install
fi

users=
if ! getent passwd longshore > /dev/null; then
  users=longshore:5000
fi

if ! getent passwd longshore-php > /dev/null; then
  users="$users longshore-php:5001"
fi

if [ -n "$users" ]; then
  long_prompt "Installing the following users/UIDs:%s" "$users."
  if [ "$reply" = "y" ]; then
    for user in $users; do
      username=$(echo "$user" | cut -d: -f1)
      uid=$(echo "$user" | cut -d: -f2)
      groupadd "$username" -g "$uid"
      if [ "$username" = "longshore" ]; then
        adduser --disabled-password --gecos "Longshore User" "$username"
      else
        useradd -u "$uid" -g "$uid" "$username"
      fi
    done
  fi
fi

if ! groups longshore | grep docker >/dev/null; then
	long_prompt "Adding longshore user to the docker group"
	adduser longshore docker
fi
longshore_sudo_file="${LONG_SHARE}/longshore.sudoers"
longshore_sudo_file_target=/etc/sudoers.d/longshore

if [ ! -f "$longshore_sudo_file_target" ] || ! diff "$longshore_sudo_file" "$longshore_sudo_file_target" > /dev/null; then
  long_prompt "Granting longshore user sudo rights to chown files"
  if [ "$reply" = "y" ]; then
    cp "$longshore_sudo_file" "$longshore_sudo_file_target"
  fi
fi

touch /home/longshore/.profile
if ! grep 'PATH="/srv/longshore/bin' /home/longshore/.profile > /dev/null; then
  long_prompt "Adding /srv/longshore/bin to PATH"
  if [ "$reply" = "y" ]; then
    echo 'PATH="/srv/longshore/bin:$PATH"' > /home/longshore/.profile
    chown longshore:longshore /home/longshore/.profile
  fi
fi

# If this is the first time we have run - we may have checked out these files
# as root so we should chown them.
if ! stat /srv/longshore/bin | grep "Uid" | grep longshore >/dev/null; then
  long_prompt "Chown'ing files"
  if [ "$reply" = "y" ]; then
    chown -R longshore:longshore /srv/longshore/bin /srv/longshore/share \
      /srv/longshore/etc /srv/longshore/.git /srv/longshore/README.md
    chown longshore:longshore /srv/longshore
  fi
fi

# Ensure the file that needs to be run as sudo is installed and up-to-date
if ! diff -q "${LONG_SHARE}/longshore-create-base-image" /usr/local/sbin/longshore-create-base-image >/dev/null; then
  long_prompt "Updating longshore-create-base-image"
  if [ "$reply" = "y" ]; then
    cp "${LONG_SHARE}/longshore-create-base-image" /usr/local/sbin/longshore-create-base-image
  fi
fi

# Ensure that longshore users owns /etc/nginx/sites-enabled so we can write
# to it.
if ! stat /etc/nginx/sites-enabled | grep "Uid" | grep longshore >/dev/null; then
  long_prompt "Chown'ing nginx sites-enabled directory"
  if [ "$reply" = "y" ]; then
    chown longshore:longshore /etc/nginx/sites-enabled 
  fi
fi

# Set phpmyadmin symlink for nginx to work properly on the host
if [ ! -h /var/www/phpmyadmin ] || [[ $(readlink /var/www/phpmyadmin) != "${LONG_SRV}/services/phpmyadmin/src" ]]; then
  long_prompt "Create phpmyadmin symlink"
  if [ "$reply" = "y" ]; then
    if [ -h /var/www/phpmyadmin ]; then
      rm -f /var/www/phpmyadmin;
    fi
    if [ -f /var/www/phpmyadmin ]; then
      long_die "There seems to be a file or directory in /var/www/phpmyadmin that should be moved by hand."
    fi
    ln -s "${LONG_SRV}/services/phpmyadmin/src" /var/www/phpmyadmin
  fi
fi

# Setup tls if necessary
if [ -n "$LONG_TLS_KEY_PATH" ]; then
  if [ -z "$LONG_X509_CERT_PATH" -o -z "$LONG_DH_PARAM_PATH" -o -z \
    "$LONG_NGINX_TLS_PATH" ]; then
    long_die "If you want https support, you have define LONG_TLS_KEY_PATH, \
      LONG_x509_CERT_PATH, LONG_DH_PARAM_PATH, and LONG_NGINX_TLS_PATH \
      in longshore.conf"
  fi
  if [ ! -f "$LONG_TLS_KEY_PATH" ]; then
    long_die "Please manually copy the key file to %s" 1 "$LONG_TLS_KEY_PATH"
  fi
  if [ ! -f "$LONG_X509_CERT_PATH" ]; then
    long_die "Please manually copy the crt file to %s" 1 "$LONG_X509_CERT_PATH"
  fi
  if [ ! -f "$LONG_DH_PARAM_PATH" ]; then
    long_prompt "Create dhparams"
    if [ "$reply" = "y" ]; then
      openssl dhparam -out "$LONG_DH_PARAM_PATH" 4096
    fi
  fi
  # Touch and fix ownership for tls.conf file
  touch "$LONG_NGINX_TLS_PATH"
  chown longshore:longshore "$LONG_NGINX_TLS_PATH"
fi
