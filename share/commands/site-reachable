#!/bin/bash

long_usage_message="usage: $(basename $0) site-reachable [<site>] [-q]
Check to see if the given site is accessible via https.

Arguments
  <site> - Optionally, pass the site you want to check. If empty or --all, 
    check all sites.
  -q - Optional indicate that you don't want the summary report at the
    end (e.g. if running via cron job)"

long_check_args "$2" "$#" 0

sites="$2"
quiet="$3"

if [ -n "$quiet" -a "$quiet" != "-q" ]; then
  long_die "I didn't understand the last argument (%s). I was expecting -q." 1 "$noreport"
fi

check_phpmyadmin=no

if [ -z "$sites" -o "$sites" = "--all" ]; then
  long_set_sites
  sites="$LONG_SITES"
  # Check phpmyadmin URLs too.
  check_phpmyadmin=yes
fi

# Adjust the retry interval. If it is during normal working hours,
# we want to know right away. Evening hours, a bit more leeway.
# And early morning (when backups happening) much longer.

hour=$(date +%H)
if [ "$hour" -lt 8 ]; then
  # Wait 5 minutes
  retry_interval=300
elif [ "$hour" -lt "18" ]; then
  # Wait one minute
  retry_interval=60
else
  # Wait 2 minutes
  retry_interval=120
fi

total_count=0
online_count=0
offline_count=0
retry_sites=

long_set_phpmyadmin_urls

for url in $LONG_PHPMYADMIN_URLS; do
  total_count=$(( $total_count + 1 ))
  if [ -f "$LONG_NGINX_TLS_PATH" ]; then
    url="https://${url}"
  else
    url="http://${url}"
  fi
  if ! long_does_page_have_text "$url" "<title>phpMyAdmin</title>"; then
    offline_count=$(( $offline_count + 1 ))
    long_log "Site %s is OFFLINE!!!" error "$url"
  else
    online_count=$(( $online_count + 1 ))
    long_log "Site %s is online" info "$url"
  fi
done

for site in $sites; do
  total_count=$(( $total_count + 1 ))
  # Ensure anonymous access to the page generates a login box.
  if ! long_is_site_reachable "$site"; then
    # Some sites timeout during backups - so keep track of the ones that
    # have timed out and retry them later.
    retry_sites="$retry_sites $site"
  else
    online_count=$(( $online_count + 1 ))
    long_log "Site %s is online" info "$site"
  fi
done

if [ -n "$retry_sites" ]; then
  long_log "Retrying sites after a %s second break: %s." info "$retry_interval" "$retry_sites"
  # Wait a few minutes to let the backup completed.
  sleep "$retry_interval"
  for site in $retry_sites; do
    if ! long_is_site_reachable "$site"; then
      # Ensure 
      offline_count=$(( $offline_count + 1 ))
      long_log "Site %s is OFFLINE!!!" error "$site"
    fi
  done
fi

if [ -z "$quiet" ]; then
  printf "\nTotal checked: %s\n" "$total_count"
  printf "Total online: %s\n" "$online_count"
  printf "Total offline: %s\n\n" "$offline_count"
fi

if [ "$offline_count" -gt "0" ]; then
  exit 1
fi
exit 0

