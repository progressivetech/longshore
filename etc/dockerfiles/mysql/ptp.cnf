; optimizations for largish civicrm databases
[mysqld]

; thread_cache_size should be increased to as much as 64 if you have
; hundreds of connections per second (we have dozens per second at
; most going from default 0, which is no cache, to 12). See
; https://dev.mysql.com/doc/refman/5.5/en/connection-threads.html
; and monitor Threads_cached and Threads_created. If Threads_created
; is high, increase thread_cache_size
thread_cache_size = 12 

; key_buffer and join_buffer are myisam specific, civicrm uses innodb 
; tables. So I'm not changing them despite many suggestions to do so
; in generic mysql tuning tips
;key_buffer_size = 16M 
;join_buffer_size = 12K 

; query cache will cache the results of queries so they are not
; re-run against the database. 
; http://docs.oracle.com/cd/E17952_01/refman-5.0-en/query-cache.html

; query_cache_size is the size of the cache, default is 0 
; setting to 96M (upped from 64M 2015-09-14 because of high Query cache prunes). 
; If Qcache_lowmem_prunes is high, this value should be increased. It should be 
; in the tens of MBytes.
query_cache_size = 100663296

; query_cache_limit  is the max size of a query 
; to cache (default is don't cache over 1 MB) ... setting to 8M
query_cache_limit = 8388600 

; type 1 means cache all types
query_cache_type = 1

; table sizes - determines how big a table
; must be before it's written to disk
; test by checking the variables:
;  Created_tmp_disk_tables and Created_tmp_tables
; default is 16M, setting to 256M
max_heap_table_size = 268440000
; default is 16M, setting to 256M
tmp_table_size = 268440000 

; prior to mysql 5.1.3, table_open_cache was table_cache
; default is 64, munin suggests we are opening a lot of
; tables so I'm increasing this number
table_open_cache = 96

; You can set innodb_buffer_pool_size up to 50 - 80%
; on a machine dedicated to the database (ours are 
; running apache as well). 
; If you set it to low, MySQL will write to disk more
; often, slowing things down. If you set it to high, the 
; server will run out of memory and starting swapping to 
; disk. 
; we have 4 GB of RAM on each server
; http://www.mysqlperformanceblog.com/2007/11/03/choosing-innodb_buffer_pool_size/
; default is just 8MB, setting to 1GB
innodb_buffer_pool_size = 2147483648 
; used to store internal db info. increase if you have lots
; of tables. default is 1M, setting to 20M
innodb_additional_mem_pool_size = 20972000 
; innodb_log_file_size should be 25% of buffer pool size
; bigger log file size means less flushing to disk, but slower 
; recovery in case of crash, default 5M, setting to 256M
innodb_log_file_size = 268440000 
; increase if you have big transactions, default 1M
; max is 8M
#innodb_log_buffer_size = 8M

; 1 is the default..
; see https://support.mayfirst.org/ticket/11972
innodb_flush_log_at_trx_commit = 2
; 50 is default
#innodb_lock_wait_timeout = 50
; 4 should only be used in emergencies
#innodb_force_recovery = 4 

; save innodb per table so we can remove it from disk space
; when we drop the database.
innodb_file_per_table

; log slow queries for better analysis.
slow_query_log  = 1
slow_query_log_file = /var/log/mysql/mysql-slow.log

; we want all errors to go to standard out so we can read them with `docker logs`
log_error = /dev/stderr

; skip networking. We don't use dns for authentication. This speeds things up
skip_name_resolve = on
