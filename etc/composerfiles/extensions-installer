#!/bin/bash

# Install extensions specified in extensions.txt file using versions in
# extensions.lock file
#
# CiviCRM is designed to have extensions pulled in via the web through the
# CiviCRM extensions repository. However, we have disabled that functionality
# for Powerbase because we want more control over which extensions are in use
# (and which extensions we will have to maintain).
#
# Our approach is to provide a directory of available extensions.
#
# Normally, we would simply pull in these extensions in our main composer.json
# file. However, most extensions don't have a composer.json file and the few
# that do, don't specify a repository type that would allow us to control where
# it should be installed. The only option is to use the repository of type
# package which requires about 14 lines of configuration and the composer docs
# says should not be used.
#
# So instead, we call this script at the end of our composer file to add
# extensions to our platform. We expect to be called from the root directory,
# just above the "web" directory.

# We expect to start in the root directory, with a web directory available.
if [ ! -d "web" ]; then
  printf "Can't find the web directory. Something is wrong. I'm in %s.\n" "$(cwd)"
  exit 1
fi

cwd=$(pwd)
path="${cwd}/web/extensions"
mkdir -p "$path"

# The file we will use to determine what to install and what version. Either the .lock file
# or the .lock file if there is no .lock file (in which case, we will create one).
active_extensions_file=

# The tmp path to a new lock file we are creating, if a lock file does not already exist.
extensions_tmp_lock_file=

if [ ! -f "${cwd}/extensions.lock" ]; then
  # Start a new lock file in a temporary file. We will move it into place when done.
  extensions_tmp_lock_file=$(mktemp)
  active_extensions_file="${cwd}/extensions.txt"
else
  active_extensions_file="${cwd}/extensions.lock"
fi
if [ ! -f "$active_extensions_file" ]; then
  printf "I need either extensions.txt or extensions.lock. I am using: '%s'.\n" "$active_extensions_file"
  exit 1
fi

# Find all lines excluding comments and empty lines.
for line in $(grep -E -v '(^[[:space:]]|^#|^$)' "$active_extensions_file"); do
  cd "$path" >/dev/null
  dir=$(echo "$line" | cut -d, -f1)
  url=$(echo "$line" | cut -d, -f2)
  version=$(echo "$line" | cut -d, -f3)
  #printf "Examining %s.\n" "$dir"

  # Calculate basename from url
  basename=$(basename "$url")
  zip=n
  [ "${basename: -4}" == ".zip" ] && zip=y

  if [ "$zip" = "n" ]; then
    # Handle git.
    if [ ! -d "$dir" ]; then
      git clone --quiet "$url" "$dir"
    fi
    cd "$dir" >/dev/null
    git remote update >/dev/null
    #printf "Checking out %s. " "$version"
    last_commit=$(git log -n1 --format=format:"%H")
    if [ "$last_commit" != "$version" ]; then
      printf "Checking out version %s of %s." "$version" "$dir"
      git checkout --quiet "$version"
    fi
    
    if [ -n "$extensions_tmp_lock_file" ]; then
      commit=$(git log --format="%H" -n 1)
      printf "Updating lockfile for %s - setting to %s." "$dir" "$commit"
      printf '%s,%s,%s\n' "$dir" "$url" "$commit" >> "$extensions_tmp_lock_file"
    fi
  else
    # Handle a zip file.
    # We have a few possible situations:
    # 1. No existing directory: Download, rsync over, and update lockfile if necessary
    # 2. Directory exists, no lock file: Download, rsync over, and update lockfile
    # 3. Directory exists, lock file exists: compare URL between lock file and txt file:
    #    a. If they are the same, do nothing
    #    b. If they are different, download, rsync over existing directory, and don't update lock file.
    zip_temp=$(mktemp) 
    zip_download=n
    if [ ! -d "$dir" ]; then
      zip_download=y
      mkdir "$dir"
    fi
    if [ -z "$extensions_tmp_lock_file" ]; then
      # We have an existing lock file. Does it have the same version as the
      # txt file?
      canonical_line=$(grep "^${dir}," "${cwd}/extensions.txt")
      canonical_url=$(echo "$canonical_line" | cut -d, -f2)
      if [ "$canonical_url" != "$url" ]; then
        # They are different. Download it again.
        zip_download=y
      fi
    else
      # We don't have an existing lock file so we download and rsync over.
      zip_download=y
    fi

    if [ "$zip_download" = "y" ]; then
      printf "Downloading, unzipping and rsyncing %s." "$dir"
      wget --quiet -O "$zip_temp" "$url"
      unzipped_temp=$(mktemp -d)
      unzip -qq -d "$unzipped_temp" "$zip_temp"
      rsync -r --delete "${unzipped_temp}/${dir}/" "${dir}/"
      if [ -n "$extensions_tmp_lock_file" ]; then
        printf '%s,%s,\n' "$dir" "$url" >> "$extensions_tmp_lock_file"
      fi
      rm -rf "$unzipped_temp"
    fi 
    rm "$zip_temp"
  fi
  printf "."
done

if [ -n "$extensions_tmp_lock_file" ]; then
  # Copying lock file into place
  printf "Moving lock file into place.\n"
  mv "$extensions_tmp_lock_file" "${cwd}/extensions.lock"
fi

printf "\n"
